#include <iostream>
#include <vector>
class Matrix {
private:
    int rows;
    int cols;
    std::vector<std::vector<int>> data;
public:
    // Constructor
    Matrix(int r, int c) : rows(r), cols(c), data(std::vector<std::vector<int>>(r, std::vector<int>(c))) {}
    // Overloaded addition operator
    Matrix operator+(const Matrix& other) const {
        if (rows != other.rows || cols != other.cols) {
            throw std::invalid_argument("Matrices must have the same dimensions for addition");
        }
        Matrix result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.data[i][j] = data[i][j] + other.data[i][j];
            }
        }
        return result;
    }
    // Overloaded subtraction operator
    Matrix operator-(const Matrix& other) const {
        if (rows != other.rows || cols != other.cols) {
            throw std::invalid_argument("Matrices must have the same dimensions for subtraction");
        }
        Matrix result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.data[i][j] = data[i][j] - other.data[i][j];
            }
        }
        return result;
    }
    // Overloaded multiplication operator
    Matrix operator*(const Matrix& other) const {
        if (cols != other.rows) {
            throw std::invalid_argument("Number of columns in the first matrix must match the number of rows in the second matrix for multiplication");
        }
        Matrix result(rows, other.cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < other.cols; ++j) {
                for (int k = 0; k < cols; ++k) {
                    result.data[i][j] += data[i][k] * other.data[k][j];
                }
            }
        }
        return result;
    }
    // Display function
    void display() const {
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                std::cout << data[i][j] << " ";
            }
            std::cout << std::endl;
        }
    }
    // Function to set matrix elements
    void setElement(int row, int col, int value) {
        if (row < 0 || row >= rows || col < 0 || col >= cols) {
            throw std::out_of_range("Index out of range");
        }
        data[row][col] = value;
    }
};
int main() {
    // Define matrices
    Matrix m1(2, 3);
    m1.setElement(0, 0, 1);
    m1.setElement(0, 1, 2);
    m1.setElement(0, 2, 3);
    m1.setElement(1, 0, 4);
    m1.setElement(1, 1, 5);
    m1.setElement(1, 2, 6);
    Matrix m2(2, 3);
    m2.setElement(0, 0, 7);
    m2.setElement(0, 1, 8);
    m2.setElement(0, 2, 9);
    m2.setElement(1, 0, 10);
    m2.setElement(1, 1, 11);
    m2.setElement(1, 2, 12);
    Matrix m3(3, 2);
    m3.setElement(0, 0, 1);
    m3.setElement(0, 1, 2);
    m3.setElement(1, 0, 3);
    m3.setElement(1, 1, 4);
    m3.setElement(2, 0, 5);
    m3.setElement(2, 1, 6);
    // Perform operations
    try {
        std::cout << "Matrix 1:" << std::endl;
        m1.display();
        std::cout << "Matrix 2:" << std::endl;
        m2.display();
        std::cout << "Matrix 3:" << std::endl;
        m3.display();
        std::cout << "Addition:" << std::endl;
        (m1 + m2).display();
        std::cout << "Subtraction:" << std::endl;
        (m1 - m2).display();
        std::cout << "Multiplication:" << std::endl;
        (m1 * m3).display();
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }
    return 0;
}
/*
output:
Matrix 1:
1 2 3 
4 5 6 
Matrix 2:
7 8 9 
10 11 12 
Matrix 3:
1 2 
3 4 
5 6 
Addition:
8 10 12 
14 16 18 
Subtraction:
-6 -6 -6 
-6 -6 -6 
Multiplication:
22 28 
49 64 
*/