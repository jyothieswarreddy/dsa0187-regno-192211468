#include <iostream>
using namespace std;

class Matrix {
private:
    int rows;
    int cols;
    int** data;

public:
    // Constructor
    Matrix(int r, int c) : rows(r), cols(c) {
        // Allocate memory for the matrix
        data = new int*[rows];
        for (int i = 0; i < rows; ++i) {
            data[i] = new int[cols];
        }
    }

    // Destructor
    ~Matrix() {
        // Deallocate memory for the matrix
        for (int i = 0; i < rows; ++i) {
            delete[] data[i];
        }
        delete[] data;
    }

    // Overloaded + operator for matrix addition
    Matrix operator+(const Matrix& other) {
        Matrix result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.data[i][j] = data[i][j] + other.data[i][j];
            }
        }
        return result;
    }

    // Overloaded - operator for matrix subtraction
    Matrix operator-(const Matrix& other) {
        Matrix result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.data[i][j] = data[i][j] - other.data[i][j];
            }
        }
        return result;
    }

    // Overloaded * operator for matrix multiplication
    Matrix operator*(const Matrix& other) {
        Matrix result(rows, other.cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < other.cols; ++j) {
                result.data[i][j] = 0;
                for (int k = 0; k < cols; ++k) {
                    result.data[i][j] += data[i][k] * other.data[k][j];
                }
            }
        }
        return result;
    }

    // Function to set values in the matrix
    void setValue(int row, int col, int value) {
        data[row][col] = value;
    }

    // Function to display the matrix
    void display() {
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                cout << data[i][j] << " ";
            }
            cout << endl;
        }
    }
};

int main() {
    Matrix mat1(2, 2);
    mat1.setValue(0, 0, 1);
    mat1.setValue(0, 1, 2);
    mat1.setValue(1, 0, 3);
    mat1.setValue(1, 1, 4);

    Matrix mat2(2, 2);
    mat2.setValue(0, 0, 5);
    mat2.setValue(0, 1, 6);
    mat2.setValue(1, 0, 7);
    mat2.setValue(1, 1, 8);

    cout << "Matrix 1:" << endl;
    mat1.display();
    cout << "Matrix 2:" << endl;
    mat2.display();

    Matrix matSum = mat1 + mat2;
    cout << "Matrix Sum:" << endl;
    matSum.display();

    Matrix matDiff = mat1 - mat2;
    cout << "Matrix Difference:" << endl;
    matDiff.display();

    Matrix matProd = mat1 * mat2;
    cout << "Matrix Product:" << endl;
    matProd.display();

    return 0;
}
/*
output:
Matrix 1:
1 2 
3 4 
Matrix 2:
5 6 
7 8 
Matrix Sum:
6 8 
10 12 
Matrix Difference:
-4 -4 
-4 -4 
Matrix Product:
19 22 
43 50 
*/