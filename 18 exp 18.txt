#include <iostream>
#include <cmath>

using namespace std;

// Abstract base class Shape
class Shape {
public:
    // Pure virtual functions
    virtual double calculateArea() const = 0;
    virtual double calculatePerimeter() const = 0;
};

// Derived class Rectangle
class Rectangle : public Shape {
private:
    double length;
    double width;

public:
    Rectangle(double l, double w) : length(l), width(w) {}

    // Implementing virtual functions
    double calculateArea() const override {
        return length * width;
    }

    double calculatePerimeter() const override {
        return 2 * (length + width);
    }
};

// Derived class Circle
class Circle : public Shape {
private:
    double radius;

public:
    Circle(double r) : radius(r) {}

    // Implementing virtual functions
    double calculateArea() const override {
        return M_PI * radius * radius;
    }

    double calculatePerimeter() const override {
        return 2 * M_PI * radius;
    }
};

int main() {
    // Create objects of Rectangle and Circle
    Rectangle rectangle(5, 3);
    Circle circle(2.5);

    // Calculate and display area and perimeter of each shape
    cout << "Rectangle:" << endl;
    cout << "Area: " << rectangle.calculateArea() << endl;
    cout << "Perimeter: " << rectangle.calculatePerimeter() << endl;

    cout << "\nCircle:" << endl;
    cout << "Area: " << circle.calculateArea() << endl;
    cout << "Perimeter: " << circle.calculatePerimeter() << endl;

    return 0;
}
/*
output:Rectangle:
Area: 15
Perimeter: 16

Circle:
Area: 19.635
Perimeter: 15.708
*/