#include <iostream>
#include <cmath>
using namespace std;
// Base class
class Shape {
public:
    // Virtual draw function
    virtual void draw() const = 0;
};
// Derived class for Circle
class Circle : public Shape {
private:
    double radius;
public:
    // Constructor
    Circle(double radius) : radius(radius) {}
    // Draw function
    void draw() const override {
        cout << "Drawing Circle with radius " << radius << endl;
    }
};
// Derived class for Square
class Square : public Shape {
private:
    double side;
public:
    // Constructor
    Square(double side) : side(side) {}
    // Draw function
    void draw() const override {
        cout << "Drawing Square with side " << side << endl;
    }
};
// Derived class for Triangle
class Triangle : public Shape {
private:
    double base, height;
public:
    // Constructor
    Triangle(double base, double height) : base(base), height(height) {}
    // Draw function
    void draw() const override {
        cout << "Drawing Triangle with base " << base << " and height " << height << endl;
    }
};
int main() {
    Circle circle(5.0);
    Square square(4.0);
    Triangle triangle(3.0, 6.0);
    cout << "Drawing shapes:" << endl;
    circle.draw();
    square.draw();
    triangle.draw();
    return 0;
}
/*
OUTPUT:Drawing shapes:
Drawing Circle with radius 5
Drawing Square with side 4
Drawing Triangle with base 3 and height 6
*/