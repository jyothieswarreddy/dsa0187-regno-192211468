#include <iostream>
#include <cmath>

using namespace std;

// Base class
class Shape {
public:
    // Virtual function for dynamic binding
    virtual void draw() {
        cout << "Drawing a shape..." << endl;
    }
};

// Derived class
class Circle : public Shape {
private:
    double radius;

public:
    Circle(double r) : radius(r) {}

    // Overridden function
    void draw() override {
        cout << "Drawing a circle with radius " << radius << endl;
    }
};

int main() {
    // Creating objects
    Shape* shapePtr;
    Shape shapeObj;
    Circle circleObj(5.0);

    // Pointing to base class object
    shapePtr = &shapeObj;
    cout << "Displaying Shape information through base class pointer:" << endl;
    shapePtr->draw();

    cout << endl;

    // Pointing to derived class object
    shapePtr = &circleObj;
    cout << "Displaying Circle information through base class pointer:" << endl;
    shapePtr->draw();

    return 0;
}
/*
output:
Displaying Shape information through base class pointer:
Drawing a shape...

Displaying Circle information through base class pointer:
Drawing a circle with radius 5
*/